// todo - follow related data - search images bigger then original preview and add if something founded +\-
// todo - remove bad links +\-
// 
// ToDo Google | Yandex :
// на сайтах которые подгружают данные с внешних сайтов нужно выставлять динамический реферер равный ссылке на внешний хост а не на текущий хост вкладки (добавить как отдельную опцию)
// очищать кеш dispetcher.recorder после сбора данных из фона ? (лучше оставлять, они перезаписываются корректно и стек не переполняется)
//
// todo - optional skip loadimg stage +\- - реализовано для фильтра по параметрам / не реализовано для Related Docs
// todo - хранить реферер и ссылку для вебреквестов как два отдельных массива для ускорения поиска -
//        Подождать полгода. Если netRequests прижевется (manifest v3), придется переходить с webRequests на него. Там совсем другой принцип хранения и переделывать смысла сейчас нет 
// todo - доп. опции для парсера - захват видосов \ вывод статуса (подробнее в kellyPageWatchdog
// todo - доп. опции для загрузчика доп. документов. Глубокий поиск (не скипать untrasted изображения если чтото найдено на этапе loadDoc), Строка соответствия - для маркировки изображений untrusted = false
// todo - замена таймеров в kellyThreadWork на "не засыпающий" через вызовы по sendMessage
// todo - настройка таймаута для запросов пропорций
// todo - данные для POST запросов в FETCH_RULES

KellyDPage = new Object();
KellyDPage.env = false;
KellyDPage.sandBox = false;

KellyDPage.urlMapDocs = false; // urlmap for docs was added to common urlmap array
KellyDPage.urlMap = []; // common urlmap for current loaded storage

KellyDPage.aDProgress = {current : 0, total : 0, minW : 0, maxW : 0, minH : 0, maxH : 0};

KellyDPage.cats = {
    
    imageBasic : {loc : 'Basic image', id : false, color : false, l : false}, 
    imageRelated : {loc : 'Related image'},
    imageError : {loc : 'Load error', exclude : true}, // load errors \ 1x1 images

    // post processing \ detected by driver groups that helps to filter good images from recorded stream
    
    imageByDocument : {loc : 'Original Image (Doc)', selected : 110},    
    imageOriginal : {loc : 'Original (HD)', selected : 100, color : '#45ea6b'},
    imagePreview : {loc : 'Preview', selected : 2, color : '#45dbea'},
    imageAny : {loc : 'Media', selected : 1, color : '#45dbea'},
    
    imageBg : {loc : 'Background image'},
    
    withDoc : {loc : 'With doc link'},
    unsettedFormat : {loc : 'Unsetted ext'},
    
    srcVideo : {loc : 'Video', exclude : true},
    srcIcon : {loc : 'Icon', exclude : true},
    
    // autogenerated groups for detected image formats can be overrided here
    
    SVG : {loc : 'SVG', exclude : true},
}

KellyDPage.getCat = function(key) {
    
    if (!KellyDPage.cats[key]) {
         KellyDPage.cats[key] = {loc : key};
    }
    
    if (!KellyDPage.cats[key].id) {
        var cat = K_FAV.getStorageManager().getCategoryBy(KellyDPage.storage, KellyDPage.cats[key].loc, 'name');
        if (cat.id == -1) cat = {id : K_FAV.getStorageManager().categoryCreate({name :  KellyDPage.cats[key].loc, nsfw : false, color : KellyDPage.cats[key].color}, KellyDPage.storage)};
        
        KellyDPage.cats[key].id = cat.id;
    }
    
    return KellyDPage.cats[key];
}

KellyDPage.addStorageItem = function(src, doc, referrer, groups) {
                                
     var ext = KellyTools.getUrlExt(src), location = KellyTools.getLocationFromUrl(src);
     groups.push(ext ? ext.toUpperCase() : 'unsettedFormat');  // extension could be undefined if route is unclear (we can check if this is actually image when img.onerror occurs)
     
     //if (K_FAV.getStorageManager().searchItem(storage, {link : src}) !== false) return;
                 
     if (ext != 'dataUrl') {

        KellyDPage.urlMap.push([location.href, referrer]);
        if (location.hostname && KellyDPage.env.hostList.indexOf(location.hostname) == -1) KellyDPage.env.hostList.push(location.hostname);
     }
     
     var catList = [];
     for (var i = 0; i < groups.length; i++)  {
         catList.push(KellyDPage.getCat(groups[i]).id);
     }
            
     return K_FAV.getStorageManager().createDbItem({ 
            images : location.href,
            info : false,
            cats : catList,
            referrer : referrer, // keep referrer for proper profile works in future
            postLink : location.href,    
            relatedDoc : doc,
            vd : groups.indexOf('srcVideo') != -1,
     }, KellyDPage.storage, false, true);
}

// full restart needed only first time and when hostlist modified

KellyDPage.updateUrlMap = function(onReady, restart) {
          
    KellyDPage.env.webRequestsRules = {
        referrer : false,
        cors : true,
        urlMap : KellyDPage.urlMap,
        hostList : KellyDPage.env.hostList,
        types : false,
        method : 'registerDownloader',
    };

    var onUpdatedEvent = function(request) {                
        if (request.method == "updateUrlMap" || request.method == "registerDownloader") {
            onReady();
            K_FAV.runtime.webRequestPort.onMessage.removeListener(onUpdatedEvent);
        }
    }
    
    var request = restart ?  KellyDPage.env.webRequestsRules : {method : 'updateUrlMap', urlMap : KellyDPage.urlMap};

    K_FAV.getGlobal('fav').coptions.webRequest = true;          
    K_FAV.runtime.webRequestPort.onMessage.addListener(onUpdatedEvent);
    K_FAV.runtime.webRequestPort.postMessage(request);
}

KellyDPage.updateDisplayedState = function() {
    
    if (!KellyDPage.commonFilters) return;

    var stat = {uniqDocsNum : 0, displayedItemsNum : 0};   
    var items = K_FAV.getGlobal('fav').items, displayed = K_FAV.getGlobal('filtered'), docs = [];
    
    for (var i = 0; i < displayed.length; i++) {
        var item = items[displayed[i]];
        if (item.relatedDoc && docs.indexOf(item.relatedDoc) == -1) docs.push(item.relatedDoc);
    }
        
    KellyDPage.statInfoBlock.innerText = KellyLoc.s('Элементы : __ITEMS__ | Документы : __RELATED_DOCS__', 'recorder_displayed_info', {ITEMS : displayed.length, RELATED_DOCS : docs.length});
           
    return {uniqDocsNum : docs.length, displayedItemsNum : displayed.length};
}

KellyDPage.updateInformerState = function(show) {

    if (!show) {
        KellyDPage.commonFiltersInfo.classList.add('collapsed');
        KellyDPage.aDProgress.progressbar.classList.add('hidden');
        KellyDPage.aDProgress.statistic.classList.add('hidden');
        return;
    }
            
    KellyDPage.aDProgress.statistic.classList.remove('hidden');
    KellyDPage.commonFiltersInfo.classList.remove('collapsed');
    
    if (KellyDPage.aDProgress.current && KellyDPage.aDProgress.total) {
       
        KellyDPage.aDProgress.progressbar.classList.remove('hidden');        
        
        var complete = Math.round(KellyDPage.aDProgress.current / (KellyDPage.aDProgress.total / 100));
        
        var bad = KellyDPage.aDProgress.fail ? Math.round(KellyDPage.aDProgress.fail / (KellyDPage.aDProgress.total / 100)) : 0;
        if (bad > 100) bad = 100;
        
        KellyDPage.aDProgress.state.innerText = KellyDPage.aDProgress.current + ' / ' + KellyDPage.aDProgress.total;        
        KellyDPage.aDProgress.line.style.width = complete + '%';
        KellyDPage.aDProgress.lineErr.style.width = bad > 0 ?  bad + '%' : '0px';
        
    } else KellyDPage.aDProgress.progressbar.classList.add('hidden');
}

KellyDPage.loadProportions = function(items, displayed, onEnd) {
   
    if (K_FAV.dataFilterLock) return false;
    K_FAV.dataFilterLock = {message : KellyLoc.s('', 'recorder_load_beasy'), context : 'loadProportions'};
  
    KellyDPage.aDProgress.total = displayed ? displayed.length : items.length;
    KellyDPage.aDProgress.current = 0;  
    
    var getStatistic = function(context) {
        
        KellyDPage.aDProgress.current = 0;
        KellyDPage.aDProgress.fail = 0;
        
        for (var i = 0; i < KellyDPage.aDProgress.total; i++) {
            var item = displayed ? items[displayed[i]] : items[i];
            if (!item.pw) continue;
            
                 if (item.pw > 0) KellyDPage.aDProgress.current++;
            else if (item.pw < 0) KellyDPage.aDProgress.fail++;
            
            if (item.pw > 0 && (KellyDPage.aDProgress.minW == 0 || item.pw < KellyDPage.aDProgress.minW)) KellyDPage.aDProgress.minW = item.pw;      
            if (item.pw > 0 && item.pw > KellyDPage.aDProgress.maxW) KellyDPage.aDProgress.maxW = item.pw; 
            if (item.ph > 0 && (KellyDPage.aDProgress.minH == 0 || item.ph < KellyDPage.aDProgress.minH)) KellyDPage.aDProgress.minH = item.ph;
            if (item.ph > 0 && item.ph > KellyDPage.aDProgress.maxH) KellyDPage.aDProgress.maxH = item.ph;   
        }
        
        var statistic = KellyLoc.s('', 'recorder_min') + ' : ' + KellyDPage.aDProgress.minW + 'x' + KellyDPage.aDProgress.minH;
            statistic += ' | ' + KellyLoc.s('', 'recorder_max') + ' : ' + KellyDPage.aDProgress.maxW + 'x' + KellyDPage.aDProgress.maxH;
            
            if (context != 'onEnd') statistic = KellyLoc.s('', 'recorder_load_proportions') + '</br>' + statistic;
            
            return statistic;
    }
    
    KellyDPage.aDProgress.imgLoader = KellyLoadDocControll.createImageLoaderController({
            onEnd : function(reason) {
                
                console.log('onEnd ' + reason);
                K_FAV.dataFilterLock = false;
                
                if (reason == 'stop') {                    
                    
                    KellyDPage.aDProgress.statistic.innerText = KellyLoc.s('', 'recorder_canceled');
                    KellyDPage.updateInformerState(true); // false
                    
                } else {
                    
                    KellyTools.setHTMLData(KellyDPage.aDProgress.statistic, getStatistic('onEnd'));
                    KellyDPage.updateInformerState(true);
                }
                                
                KellyDPage.aDProgress.imgLoader = false;
                if (onEnd) onEnd(reason);
            },                    
            onAskJob : function(controller) {
                
                KellyTools.setHTMLData(KellyDPage.aDProgress.statistic, getStatistic('onAskJob'));
                KellyDPage.updateInformerState(true);
                
                for (var i = 0; i < KellyDPage.aDProgress.total; i++) {
                    var item = displayed ? items[displayed[i]] : items[i];
                    if (!item.pw) return {src : item.pImage, item : item};     
                }                   
                
                return false;
            },
            onImageLoad : function(controller, item, proportions, error) {
                                    
                item.pw = proportions[0];
                item.ph = proportions[1];                    
                
                KellyTools.setHTMLData(KellyDPage.aDProgress.statistic, getStatistic('onImageLoad'));
                KellyDPage.updateInformerState(true);
            },
        });
        
    KellyDPage.aDProgress.imgLoader.run(); 
    return true;
}

KellyDPage.showAdditionFilters = function() {
    
    if (KellyDPage.commonFilters) return;
    
    var cl = KellyDPage.env.className, section = document.getElementById(cl + '-sidebar-wrap'), html = '', collapsed = (K_FAV.mobileOptimization ? 'collapsed' : '');
    
    KellyDPage.commonFilters = document.createElement('div');
    KellyDPage.commonFilters.className = cl + '-common-filters-wrap';
    
    section.insertBefore(KellyDPage.commonFilters, section.firstChild);
        
    KellyDPage.statInfoBlock = document.createElement('DIV');
    KellyDPage.statInfoBlock.className = cl + '-displayed-info';
    
    var isLoadRelatedSupport = KellyDPage.compatibleFilter && KellyDPage.compatibleFilter.manifest.detectionLvl.indexOf('imageByDocument') != -1;
    KellyDPage.env.getMainContainers().menu.appendChild(KellyDPage.statInfoBlock);

    html += '<div class="' + cl + '-extra-sort ' + cl + '-section-header-inline ' + cl + '-section-sidebar_section_extra_sort" data-target="sidebar_section_extra_sort">\
                <span>&#9660; ' + KellyLoc.s('', 'recorder_sort') + '</span>\
            </div>';
            
    html += '<div class="' + cl + '-ModalBox ' + cl + '-ModalBox-section ' + cl + '-ModalBox-addition ' + cl + '-section-sidebar_section_extra_sort collapsed" data-title="sidebar_section_extra_sort">'; 
    
    html += '<div class="' + cl + '-ModalBox-content ' + cl + '-ModalBox-addition-content">';
    html += '<div class="' + cl + '-buttons  ' + cl + '-buttons-proportions">\
                <p>' + KellyLoc.s('', 'recorder_sort_proportions') + '</p>\
                <button class="' + cl + '-proportions-desc" data-sort="desc">' + KellyLoc.s('', 'recorder_desc') + '</button>\
                <button class="' + cl + '-proportions-asc" data-sort="asc">' + KellyLoc.s('', 'recorder_asc') + '</button>\
             </div>';
             
    html += '<div class="' + cl + '-buttons ' + cl + '-buttons-order">\
                <p>' + KellyLoc.s('', 'recorder_sort_order') + '</p>\
                <button class="' + cl + '-order-asc" data-sort="asc">' + KellyLoc.s('', 'recorder_order_direct') + '</button>\
                <button class="' + cl + '-order-desc" data-sort="desc">' + KellyLoc.s('', 'recorder_order_reverse') + '</button>\
             </div>'; 
             
    html += '</div>';                 

    html += '</div>';
    html += '<div class="' + cl + '-extra-filters ' + cl + '-section-header-inline ' + cl + '-section-sidebar_section_extra_filters" data-target="sidebar_section_extra_filters">\
                <span>&#9660; ' + KellyLoc.s('', 'recorder_extra_filters') + ' ' + '&nbsp;&nbsp;&nbsp;(<a href="#" class="' + cl + '-help">' + KellyLoc.s('', 'tip') + '</a>)' + '</span>\
            </div>';
            
    html += '<div class="' + cl + '-ModalBox ' + cl + '-ModalBox-section ' + cl + '-ModalBox-addition ' + collapsed + '" data-title="sidebar_section_extra_filters">'; 
    
    html += '<div class="' + cl + '-ModalBox-content ' + cl + '-ModalBox-addition-content">';

    html += '<div class="' + cl + '-bounds"> \
                <input type="text" class="' + cl +'-filter-width ' + cl + '-wMin" placeholder="' + KellyLoc.s('', 'recorder_width') + '" value=""> x \
                <input type="text" class="' + cl + '-filter-height ' + cl + '-hMin" placeholder="' + KellyLoc.s('', 'recorder_height') + '" value=""> - \
                <input type="text" class="' + cl +'-filter-width ' + cl + '-wMax" placeholder="' + KellyLoc.s('', 'recorder_width') + '" value=""> x \
                <input type="text" class="' + cl + '-filter-height ' + cl + '-hMax" placeholder="' + KellyLoc.s('', 'recorder_height') + '" value="">\
            </div>';
            
    html += '<div class="' + cl + '-url-exclude">\
                <input type="text" class="' + cl + '-filter-url-exclude ' + cl + '-excUrl" placeholder="' + KellyLoc.s('Exclude urls', 'recorder_exclude_urls') + '">\
                <label><input type="checkbox" class="' + cl + '-excUrlReg"> ' + KellyLoc.s('Reqular expression', 'recorder_regular_expr') + '</label>\
             </div>'; 
             
    html += '<div class="' + cl + '-url">\
                <input type="text" class="' + cl + '-filter-url ' + cl + '-srcUrl" placeholder="' + KellyLoc.s('', 'recorder_match_url') + '">\
                <label><input type="checkbox" class="' + cl + '-srcUrlReg"> ' + KellyLoc.s('Reqular expression', 'recorder_regular_expr') + '</label>\
            </div>';
            
    html += '<div class="' + cl + '-buttons ' + cl + '-buttons-single ' + cl + '-buttons-filter"><button class="' + cl + '-filter">' + KellyLoc.s('Filter', 'recorder_filter') + '</button></div>';

    html += '<div class="' + cl + '-buttons ' + cl + '-buttons-last">\
                <button class="' + cl + '-related-links">' + (isLoadRelatedSupport ? '<span class="' + cl + '-checkmark"></span>' : '') + KellyLoc.s('Load related links', 'recorder_load_related_doc') + '</button>\
                <button class="' + cl + '-related-links-options ' + cl + '-iconset1 ' + cl + '-icon-gear"></button>\
             </div>';
             
    html += '<div class="' + cl + '-related-links-options-wrap hidden">\
                <input type="text" class="' + cl + '-filter-url-related ' + cl + '-relatedDocTrustedUrl" placeholder="' + KellyLoc.s('', 'recorder_related_doc_trusted_url') + '">\
                <label><input type="checkbox" class="' + cl + '-relatedDocTrustedUrlReg"> ' + KellyLoc.s('Reqular expression', 'recorder_regular_expr') + '</label>\
                <label><input type="checkbox" class="' + cl + '-relatedDocDeepSearch"> ' + KellyLoc.s('', 'recorder_related_doc_deep_search') + '</label>\
            </div>';
            
    html += '</div>';                 

    html += '</div>';
    html += '<div class="' + cl + '-extra-filters ' + cl + '-section-header-inline ' + cl + '-section-sidebar_section_extra_progress" data-target="sidebar_section_extra_progress"></div>';    
    html += '<div class="' + cl + '-ModalBox ' + cl + '-ModalBox-section ' + cl + '-ModalBox-addition ' + cl + '-ModalBox-addition-informer collapsed" data-title="sidebar_section_extra_progress">'; 
    html += '<div class="' + cl + '-ModalBox-content ' + cl + '-ModalBox-addition-content">';
    
    html += '<div class="' + cl + '-downloader-statistic hidden"></div>';                
    html += '<div class="' + cl + '-downloader-progressbar hidden">\
                 <span class="' + cl + '-downloader-progressbar-line ' + cl + '-downloader-progressbar-line-ok" style="width: 0%;"></span>\
                 <span class="' + cl + '-downloader-progressbar-line ' + cl + '-downloader-progressbar-line-err" style="width: 0px;"></span>\
                 <span class="' + cl + '-downloader-progressbar-state"></span>\
             </div>';
             
    html += '</div>';          
    html += '</div>';  
             
             
    KellyTools.setHTMLData(KellyDPage.commonFilters, html);   
    KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-help').onclick = function() {
        if (K_FAV.dataFilterLock) return;
        var tooltip = KellyTools.getNoticeTooltip(KellyDPage.env.hostClass, KellyDPage.env.className), data = {CHECKMARK : '<span class="' + cl + '-checkmark"></span>'};
        var html = KellyLoc.s('', 'recorder_filter_help', data);
        for (var i = 1; i <= 10; i++) html += KellyLoc.s('', 'recorder_filter_help_' + i, data);
           
        KellyTools.setHTMLData(tooltip.getContent(), '<div>' + html + '</div>');                
        tooltip.show(true);
        return false;
    }
    
    KellyDPage.aDProgress.progressbar = KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-downloader-progressbar');
    KellyDPage.aDProgress.line = KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-downloader-progressbar-line-ok');
    KellyDPage.aDProgress.lineErr =  KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-downloader-progressbar-line-err');
    KellyDPage.aDProgress.state = KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-downloader-progressbar-state');
    KellyDPage.aDProgress.statistic = KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-downloader-statistic');
    KellyDPage.commonFiltersInfo = KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-ModalBox-addition-informer');
    
    var sections = KellyDPage.commonFilters.getElementsByClassName(cl + '-section-header-inline');
    for (var i = 0; i < sections.length; i++) {
        sections[i].onclick = function(e) {
            if (K_FAV.dataFilterLock) return;
            if (e.target.classList.contains(cl + '-help')) return false;
            
            for (var i = 0; i < sections.length; i++) {
                if (sections[i] == this) continue;
                var collapseBox = KellyDPage.commonFilters.querySelector('[data-title=' + sections[i].getAttribute('data-target') + ']');
                if (collapseBox) collapseBox.classList.add('collapsed');
            }
            
            var box = KellyDPage.commonFilters.querySelector('[data-title=' + this.getAttribute('data-target') + ']');
            if (box.classList.contains('collapsed')) box.classList.remove('collapsed');
            else box.classList.add('collapsed');
        }
    }
    
    KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-related-links-options').onclick = function() {
        KellyTools.toogleActive(KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-related-links-options-wrap'));
    }
        
    KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-filter').onclick = function() {
        
        var self = this;
        if (KellyDPage.aDProgress.imgLoader) {
            KellyDPage.aDProgress.imgLoader.stop();
            return false;
        }
        
        if (!KellyDPage.storage) return;        
        if (K_FAV.dataFilterLock) return;
        
        var filters = K_FAV.getFilters(filters), unknownBounds = 0, boundsRequired = false;
        var filterKeys = ['wMin', 'hMin', 'wMax', 'hMax', 'srcUrl', 'excUrl', 'srcUrlReg', 'excUrlReg']; 
            filterKeys.forEach(function(key) {
                 var input = KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-' + key);
                 if (!input) return;
                 if (['wMin', 'hMin', 'wMax', 'hMax'].indexOf(key) != -1 && input.value) boundsRequired = true;
                 
                 filters[key] = ['srcUrlReg', 'excUrlReg'].indexOf(key) != -1 ? input.checked : input.value;
            });
                 
        var filterRun = function() {
            
            self.innerText = KellyLoc.s('Filter', 'recorder_filter'); 
            K_FAV.setFilters(filters); 
            K_FAV.updateFilteredData();                    
            K_FAV.updateImagesBlock();                
            K_FAV.updateImageGrid();

            KellyDPage.aDProgress.current = 0;
            KellyDPage.aDProgress.fail = 0;
            KellyDPage.aDProgress.total = 0;
            KellyDPage.aDProgress.statistic.innerText = KellyLoc.s('Данные отфильтрованы', 'recorder_filtered');
            KellyDPage.updateInformerState(true);
        }
        
        if (boundsRequired) {
            
            for (var i = 0; i < KellyDPage.storage.items.length; i++) {
                if (!KellyDPage.storage.items[i].pw) unknownBounds++;
            }
                        
            console.log('Filter data - Need to update before filter by bounds - ' + unknownBounds);
                        
            if (unknownBounds > 0 && !KellyDPage.aDProgress.imgLoader) {
                self.innerText = KellyLoc.s('', 'recorder_load_prop_skip');
                KellyDPage.loadProportions(KellyDPage.storage.items, false, filterRun); 
            } else filterRun();
            
        } else filterRun();        
    }
    
    KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-related-links').onclick = function() {
        
        var self = this;
        if (KellyDPage.aDProgress.docLoader && KellyDPage.aDProgress.docLoader.getCurrentStage() != 'off') {
            KellyDPage.aDProgress.docLoader.stop();
            return false;
        }
        
        if (K_FAV.dataFilterLock) return false;                
        K_FAV.dataFilterLock =  {message : KellyLoc.s('', 'recorder_load_beasy'), context : 'loadRelatedDoc'};  
        
        KellyDPage.aDProgress.docLoader = new KellyLoadDocControll({storage : KellyDPage.storage, filtered : K_FAV.getGlobal('filtered'), threadOptions : KellyDPage.storage.coptions.recorderThread});
        KellyDPage.aDProgress.docLoader.additionOptions = {'relatedDocDeepSearch' : false, 'relatedDocTrustedUrl' : false, 'relatedDocTrustedUrlReg' : false};
        
        for (var aOptionKey in KellyDPage.aDProgress.docLoader.additionOptions) {
            
            var input = KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-' + aOptionKey);
            if (!input) continue;
         
            KellyDPage.aDProgress.docLoader.additionOptions[aOptionKey] = ['relatedDocDeepSearch', 'relatedDocTrustedUrlReg'].indexOf(aOptionKey) != -1 ? input.checked : input.value;
        }
        
        KellyDPage.aDProgress.docLoader.events.onRelatedDocImageCheck = function(item) {
            
            // check matches with already addeded items and add Original group | if return TRUE - accept without default check
            // item.relatedItem.ph -- original "preview" item from where related document was recieved new item [item.ph item.pw item.src]
        }
        
        // todo - list errors
        
        KellyDPage.aDProgress.docLoader.events.onUpdateState = function(stage, context, stat) {
                        
            if (stage != 'off') {
                
                KellyDPage.aDProgress.current = stat.current;
                KellyDPage.aDProgress.total = stat.total;
                KellyDPage.aDProgress.fail = 0; // todo - get relateddoc load fail num
                
                var data = {};
                if (stage == 'loadDoc') data = {IMAGESNUM : stat.images, IMAGESNUM_TRUSTED : stat.trustedImages}; 
                                
                KellyTools.setHTMLData(KellyDPage.aDProgress.statistic, KellyLoc.s('', 'recorder_load_doc_' + stage, data));         
            } 
            
            // onDownloadDocEnd - calls on end of stage 1. - temp switch to stage - off. - all related documents loaded
            // now we need update urlmap to assoc with referers of related item before load and check images proportions
            
            if (context == 'onDownloadDocEnd') {
                
                if (KellyDPage.aDProgress.docLoader.docsImages.length > 0) {
                    KellyDPage.aDProgress.docLoader.docsImages.forEach(function(item) {
                         
                        KellyDPage.urlMap.push([item.src, item.relatedItem.referrer]);
                            
                        var loc = KellyTools.getLocationFromUrl(item.relatedDoc); 
                        if (KellyDPage.env.hostList.indexOf(loc.hostname) == -1) KellyDPage.env.hostList.push(loc.hostname);                    
                    });
                    
                    // run stage 2.
                    
                    KellyDPage.updateUrlMap(function() {
                        self.innerText = KellyLoc.s('', 'recorder_load_prop_skip');
                        KellyDPage.aDProgress.docLoader.runImgLoad();
                    }, true);
                    
                } else {
                    
                    KellyDPage.aDProgress.statistic.innerText = KellyLoc.s('', KellyDPage.aDProgress.docLoader.docs.length <= 0 ? 'recorder_no_related_docs' : 'recorder_cant_find_images');
                    K_FAV.dataFilterLock = false;            
                    self.innerText = KellyLoc.s('', 'recorder_load_related_doc');                       
                    KellyDPage.commonFilters.classList.remove(cl + '-process-docLoader-work'); 
                }
                
            } else if (context == 'onDownloadDoc') {}
            
            KellyDPage.updateInformerState(true); // stage != 'off'
        }
        
        KellyDPage.aDProgress.docLoader.events.onQualityImageFound = function(relatedItem, imageData) {
            
            var origGroupName = 'imageByDocument' + (KellyDPage.aDProgress.folderNum ? '_' + KellyDPage.aDProgress.folderNum : '');
            if (imageData.groups.indexOf(origGroupName) == -1) imageData.groups.push(origGroupName); 
                        
            // todo - keep related doc as postlink
            
            var newItem = KellyDPage.addStorageItem(imageData.src, false, relatedItem.referrer, imageData.groups);
            if (newItem.itemIndex) {
                KellyDPage.storage.items[newItem.itemIndex].pw = imageData.pw;
                KellyDPage.storage.items[newItem.itemIndex].ph = imageData.ph;                
                KellyDPage.storage.items[newItem.itemIndex].orderIndex = KellyDPage.storage.items.indexOf(relatedItem);
            }
        }
        
        KellyDPage.aDProgress.docLoader.events.onStagesEnd = function(reason, addedTotal) {
 
            if (addedTotal > 0) {
                
                KellyDPage.aDProgress.statistic.innerText = KellyLoc.s('', 'recorder_added_images_num', {IMAGESNUM : addedTotal});    
                
                KellyDPage.storage.items.sort(function(a, b) {
                    var indexA = !a.orderIndex ? 0 : a.orderIndex, indexB = !b.orderIndex ? 0 : b.orderIndex;
                    return indexA - indexB;
                });
            
                // some of images was added in onQualityImageFound by addStorageItem - urllist changed - need to refresh BG list again
                
                KellyDPage.updateUrlMap(function() {
                    
                    KellyDPage.setDefaultCatFilters();
                    
                    K_FAV.updateCategoryList();
                    K_FAV.updateFavCounter();
                    K_FAV.updateFilteredData();                    
                    K_FAV.updateImagesBlock();                
                    K_FAV.updateImageGrid();   
                });
                
                KellyDPage.aDProgress.folderNum = KellyDPage.aDProgress.folderNum ? KellyDPage.aDProgress.folderNum + 1 : 2;                
                KellyDPage.cats['imageByDocument_' + KellyDPage.aDProgress.folderNum] = {
                    loc : KellyDPage.cats['imageByDocument'].loc + ' (' + KellyDPage.aDProgress.folderNum + ')', 
                    selected : KellyDPage.cats['imageByDocument'].selected + KellyDPage.aDProgress.folderNum
                };
                
            } else {
                     
               KellyDPage.aDProgress.statistic.innerText = KellyLoc.s('', reason == 'stop' ? 'recorder_canceled' : 'recorder_cant_find_originals_images');       
                
            }
        
            K_FAV.dataFilterLock = false;            
            self.innerText = KellyLoc.s('', 'recorder_load_related_doc');                       
            KellyDPage.commonFilters.classList.remove(cl + '-process-docLoader-work');
                
            KellyDPage.updateInformerState(true); // false
        }
        
        self.innerText = KellyLoc.s('', 'recorder_load_doc_stop');
        KellyDPage.commonFilters.classList.add(cl + '-process-docLoader-work');
        if (!KellyDPage.urlMapDocs) {
            
            KellyDPage.urlMapDocs = true;
            
            KellyDPage.storage.items.forEach(function(item) {
                 if (!item.relatedDoc) return;
                 
                var loc = KellyTools.getLocationFromUrl(item.relatedDoc); 
                    KellyDPage.urlMap.push([item.relatedDoc, item.referrer]);
                    
                if (KellyDPage.env.hostList.indexOf(loc.hostname) == -1) KellyDPage.env.hostList.push(loc.hostname);                    
            });
            
            KellyDPage.updateUrlMap(KellyDPage.aDProgress.docLoader.run, true);
            
        } else {
            
            for (var i = 0; i < KellyPageWatchdog.filters.length; i++) // todo - untested
                if (KellyPageWatchdog.filters[i].onInitDocLoader && KellyPageWatchdog.filters[i].onInitDocLoader(KellyDPage.aDProgress.docLoader, KellyDPage.env.hostList) === false) {
                    
                    KellyDPage.aDProgress.statistic.innerText = KellyLoc.s('', 'recorder_terminated');
                    KellyDPage.updateInformerState(true);
                    return;
                }
                
            KellyDPage.aDProgress.docLoader.run();
        }
    }
    
    var proportionsSort = function() {
        
        if (KellyDPage.aDProgress.imgLoader) {
            KellyDPage.aDProgress.imgLoader.stop();
            return false;
        }
        
        if (K_FAV.dataFilterLock) return;
        
        var self = this, items = K_FAV.getGlobal('fav').items, sortby = this.getAttribute('data-sort'), displayed = K_FAV.getGlobal('filtered');
            self.innerText =  KellyLoc.s('', 'recorder_load_doc_stop');
            self.classList.add('selected');
            
        KellyDPage.loadProportions(items, displayed, function(reason) {
             
            self.innerText =  KellyLoc.s('', 'recorder_' + sortby);
            self.classList.remove('selected');
            
            if (reason == 'stop') return;
            
            items.sort(function(a, b) {
                if (!a.pw) return -1;
                var megaPixels = (a.pw * a.ph) / 1000000, megaPixelsB = (b.pw * b.ph) / 1000000;                           
                return sortby == 'desc' ? megaPixelsB - megaPixels : megaPixels - megaPixelsB;
            });
                
            items.forEach(function(item) {
                 if (item.pw && item.pw >= 1 && item.pw <= 3) {
                     item.categoryId.push(KellyDPage.getCat('imageError').id);                   
                 }
            });
        
            var filters = K_FAV.getFilters(filters);
                filters.catIgnoreFilters.push(KellyDPage.cats['imageError'].id);
                
            K_FAV.setFilters(filters);
            
            K_FAV.updateCategoryList();
            K_FAV.updateFilteredData();                    
            K_FAV.updateImagesBlock();                
            K_FAV.updateImageGrid();
            K_FAV.save('items');
        });
    }
    
    var orderSort = function() {
        
        if (K_FAV.dataFilterLock) return;
        
        var items = K_FAV.getGlobal('fav').items, sortby = this.getAttribute('data-sort');        
            items.sort(function(a, b) {                          
                return sortby == 'desc' ? b.id - a.id : a.id - b.id;
            });

            K_FAV.updateCategoryList();
            K_FAV.updateFilteredData();                    
            K_FAV.updateImagesBlock();                
            K_FAV.updateImageGrid();
            K_FAV.save('items');
    }
    
    KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-proportions-desc').onclick = proportionsSort;  
    KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-proportions-asc').onclick = proportionsSort;  
    KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-order-desc').onclick = orderSort;  
    KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-order-asc').onclick = orderSort;  

    KellyDPage.updateDisplayedState();    
}

KellyDPage.setDefaultCatFilters = function() {
    
      var filters = {catIgnoreFilters : [], catFilters : [], logic : 'or'};
      
      var sKey = false;
      for (var k in KellyDPage.cats) {
            if (KellyDPage.cats[k].id) {
                     if (KellyDPage.cats[k].selected && (sKey === false || KellyDPage.cats[k].selected > KellyDPage.cats[sKey].selected)) sKey = k;
                else if (KellyDPage.cats[k].exclude) filters.catIgnoreFilters.push(KellyDPage.cats[k].id);
            }
      }
      
      // selected group suggested on priority
      if (sKey !== false ) filters.catFilters.push(KellyDPage.cats[sKey].id);
      
      K_FAV.setFilters(filters);
}

KellyDPage.showRecordedImages = function(onShow) {
    
     KellyTools.getBrowser().runtime.sendMessage({method: "getRecord"}, function(response) {
          
          // console.log(response.images);     
          
          for (var k in response.cats) KellyDPage.cats[k] = response.cats[k];          
          for (var i = 0; i < response.images.length; i++) {
              
              for (var b = 0; b < response.images[i].relatedSrc.length; b++) {
                  
                    var groups = response.images[i].relatedGroups && response.images[i].relatedGroups[b] ? response.images[i].relatedGroups[b] : [];
                        groups.push(b > 0 ? 'imageRelated' : 'imageBasic');
                        
                    if (b == 0 && response.images[i].relatedDoc) groups.push('withDoc');
                    KellyDPage.addStorageItem(response.images[i].relatedSrc[b], response.images[i].relatedDoc, response.images[i].referrer, groups);
              }  
          }
                    
          KellyDPage.setDefaultCatFilters();
          K_FAV.updateFavCounter();
          
          // todo - keep hostname (initial tab host) \ dbname \ hostlist (all hosts of all items in db) in items storage as addition option for easy reload this data from profile 
          var responseLocation = KellyTools.getLocationFromUrl(response.host);
          K_FAV.getGlobal('fav').dbName = KellyTools.generateIdWord(responseLocation.hostname.replace('.', '_') + '_record');
          KellyDPage.compatibleFilter = KellyPageWatchdog.getCompatibleFilter(responseLocation.hostname);
          
          KellyDPage.updateUrlMap(function(){            
              
              K_FAV.showFavouriteImages(); 
              if (onShow) onShow();
          }, true);
          
          // console.log(KellyDPage.env.webRequestsRules);          
          // window.requestAnimationFrame(function(){ });  

          K_FAV.save('items'); // save to default profile (setted in .init method) last loaded data   
     });
}
     
KellyDPage.init = function() {
    
     window.K_FAV = false;
     document.title = KellyTools.getProgName();

     var badItems = []; 
     
     K_FAV = new KellyFavItems({env : KellyProfileRecorder.getInstance(), allowMobile : true});
              
     KellyDPage.env = K_FAV.getGlobal('env');
     KellyDPage.env.hostClass = 'options_page';
     
     KellyDPage.env.events.onDisplayBlock = function(mode, action, oldMode) {
         if (mode == 'fav' && action == 'show') {
             KellyDPage.showAdditionFilters();
             KellyDPage.statInfoBlock.style.display = '';
         }
         
         if (mode != 'fav' && action == 'show' && KellyDPage.statInfoBlock) {
             KellyDPage.statInfoBlock.style.display = 'none';
         }
     }
     
     KellyDPage.env.events.onGridBadBounds = function(self, data) {
         
          // retry before delete ?
          
          if (data.errorCode < 4 && data.tile) {

                var index = parseInt(data.tile.getAttribute('itemIndex')), item = K_FAV.getGlobal('fav').items[index];
                if (item && badItems.indexOf(index) == -1) {

                    item.categoryId.push(KellyDPage.getCat('imageError').id);
                    
                    K_FAV.getStorageManager().createDbItem({ 
                            cats : item.categoryId,
                            itemIndex : index,
                    }, KellyDPage.storage, true, true);
                    
                    badItems.push(index);
                }
          }
          
          return true;
          // updateFilteredData from time to time
      }  
      
      KellyDPage.env.events.onUpdateFilteredData = function(displayedItems){
          KellyDPage.updateDisplayedState();
      }
      
      KellyDPage.env.events.onGridUpdated = function(self, isAllBoundsLoaded) {
       
          if (isAllBoundsLoaded && badItems.length) {
              
              console.log('Bad items : ' + badItems.length); // todo showCatList public?
              
              // some groups can be added during image load in KellyDPage.env.events.onGridBadBounds
              K_FAV.updateCategoryList();
              K_FAV.updateFavCounter();
          }
     }   
     
     KellyDPage.env.events.onGridResizeImages = function(self, itemInfo) {
         if (!itemInfo.boundEl.getAttribute('data-width')) return;
         if (!itemInfo.tile || !itemInfo.boundEl || itemInfo.boundEl.tagName != 'IMG') return false;
                    
         var dimensionsInfo = KellyTools.getElementByClass(itemInfo.tile, KellyDPage.env.className + '-preview-dimensions'); 
         if (!dimensionsInfo) {
             dimensionsInfo = document.createElement('DIV');
             dimensionsInfo.className = KellyDPage.env.className + '-preview-dimensions';
             dimensionsInfo.innerText = itemInfo.boundEl.getAttribute('data-width') + 'x' + itemInfo.boundEl.getAttribute('data-height');
             itemInfo.tile.appendChild(dimensionsInfo);
         }
     }
     
     KellyDPage.env.events.onStorageAfterload = function(fav, loadType, context) { // context == 'selectDB' 
        
        console.log('[onStorageAfterload] Data ready | mode : ' + (loadType ? loadType : ' CFG + ITEMS'));
        if (loadType == 'cfg' || !loadType) {
              
            if (!KellyDPage.storage) {
                
                KellyDPage.storage = fav;            
                K_FAV.getStorageManager().collectSource = ['user-current']; // источник данных для сохранения в профиль
                
                var defaultItemStorage = K_FAV.getStorageManager().getDefaultData();
                for (var k in defaultItemStorage) fav[k] = defaultItemStorage[k]; 
                 
                fav.selected_cats_ids = [];
                fav.categories = [];
                fav.coptions.webRequest = false;  
            }
            
            fav.coptions.storage = 'default';
            fav.coptions.storageDesc = {'default' : {name : KellyLoc.s('', 'recorder_last_recorded')}};
            fav.coptions.newFirst = false;
            fav.coptions.optionsSide
            fav.coptions.grid.fixed = 4;
            fav.coptions.grid.type = 'fixed';
            fav.coptions.grid.lazy = true; // gently creates loading pool with max queryes per second
            fav.coptions.grid.perPage = 120;        
        } 
        
        if (loadType == 'items' || !loadType) {
            
            K_FAV.dataFilterLock = {message : KellyLoc.s('', 'recorder_load_beasy_wr'), context : context};
            
            KellyDPage.urlMapDocs = false;
            KellyDPage.urlMap = [];
            KellyDPage.env.hostList = []; // todo - сохранять список хостов в [items]
            
            fav.items.forEach(function(item) {
                 if (item.referrer) {
                    KellyDPage.urlMap.push([item.pImage, item.referrer]);

                    var imageHost = KellyTools.getLocationFromUrl(item.pImage).hostname;
                    if (imageHost && KellyDPage.env.hostList.indexOf(imageHost) == -1) KellyDPage.env.hostList.push(imageHost);
                 }
            });
            
            KellyDPage.updateUrlMap(function(){            
                    K_FAV.dataFilterLock = false;
            }, true);            
                          
            console.log('[onStorageAfterload] Update Url map required');              
        }
     }
      
     /*
        getGlobal('mode') - fav | ctoptions
        setFilters
        callbacks      
        
        env.events.onGridBadBounds(self, data)
        env.events.onGridUpdated(self, isAllBoundsLoaded);
        env.events.onGridLoadBounds(self, boundEl, state); 
        env.events.onGridResizeImages(self, itemInfo);
        env.events.onUpdateFilteredData(displayedItems); 
        
     */
            
     K_FAV.load('cfg', function(fav) {
    
        // todo hide this options on options tab
        // динамически менять minHeight для рядов с < 50x50 картинками
        
        /*
        
        // пока разрешено, спама сейвами быть не должно - один сейв после загрузки данных BG, второй как загрузятся первые пропорции
                
        K_FAV.getGlobal('image_events').saveImageProportions = function() { 
        
            if (KellyDPage.storage && KellyDPage.storage.coptions.storage != 'default' && K_FAV.proportionsUpdateCfg.lastLoadedItems.length) {
                
                console.log('save new proportions for items');                  
                K_FAV.proportionsUpdateCfg.lastLoadedItems = [];
                K_FAV.save('items');
            }
        } 
        */           

        var nativeOnExtensionReady = KellyDPage.env.events.onExtensionReady;            
        KellyDPage.env.events.onExtensionReady = function() {
            
            if (nativeOnExtensionReady) nativeOnExtensionReady();
            
            KellyDPage.getContainer().removeAttribute('style');
            
            // реструктуризация страницы настроек, блокировка редактирования некоторых предустановленных настроек
            
            var options = K_FAV.getOptionsManager();
                options.protectedOptions = ['grid_fixed', 'grid_type', 'grid_lazy', 'grid_viewerShowAs', 'grid_perPage', 'optionsSide', 'webRequest', 'newFirst', 'unlockCensored'];
            
            delete options.tabData['BaseOptions'].parts.fast_download;
            delete options.tabData['BaseOptions'].parts.options_fav_add;
            
            KellyLoadDocControll.initOptions(options);
            for (var i = 0; i < KellyPageWatchdog.filters.length; i++) if (KellyPageWatchdog.filters[i].onInitOptions) KellyPageWatchdog.filters[i].onInitOptions(options, fav.coptions); 
            
                 if (window.location.href.indexOf('tab=options') != -1) K_FAV.showOptionsDialog();
            else if (window.location.href.indexOf('tab=profiles') != -1) K_FAV.showOptionsDialog(KellyDPage.env.className + '-Storage');
            else KellyDPage.showRecordedImages(); 
        }
        
        var resources = ['core', 'single', 'recorderDownloader'];
        
        if (fav.coptions.darkTheme) {
            document.body.classList.add(KellyDPage.env.className + '-dark');
            resources.push('dark');
        }
        
        K_FAV.initFormatPage(resources);         
     });
     
     KellyTools.setHTMLData(document.getElementById('submenu'), '<div class="' + KellyDPage.env.className + '-copyright-info">' + KellyTools.getProgName() + '<span id="copyright-software"></span></div>'); 
     KellyTools.setCopyright('copyright-software');
}

KellyDPage.getContainer = function() {   
 
    if (this.sandBox) return this.sandBox;    
    this.sandBox = document.getElementById('sandbox-env');
    return this.sandBox;    
}